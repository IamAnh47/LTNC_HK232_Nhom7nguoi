"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkInstanceConfig = exports.provisionCloudSql = void 0;
const cloudSqlAdminClient = require("../gcp/cloudsql/cloudsqladmin");
const utils = require("../utils");
const checkIam_1 = require("./checkIam");
const utils_1 = require("../utils");
const GOOGLE_ML_INTEGRATION_ROLE = "roles/aiplatform.user";
const freeTrial_1 = require("./freeTrial");
const error_1 = require("../error");
async function provisionCloudSql(args) {
    let connectionName;
    const { projectId, locationId, instanceId, databaseId, enableGoogleMlIntegration, silent } = args;
    try {
        const existingInstance = await cloudSqlAdminClient.getInstance(projectId, instanceId);
        silent || utils.logLabeledBullet("dataconnect", `Found existing instance ${instanceId}.`);
        connectionName = (existingInstance === null || existingInstance === void 0 ? void 0 : existingInstance.connectionName) || "";
        if (!checkInstanceConfig(existingInstance, enableGoogleMlIntegration)) {
            silent ||
                utils.logLabeledBullet("dataconnect", `Instance ${instanceId} settings not compatible with Firebase Data Connect. ` +
                    `Updating instance to enable Cloud IAM authentication and public IP. This may take a few minutes...`);
            await (0, utils_1.promiseWithSpinner)(() => cloudSqlAdminClient.updateInstanceForDataConnect(existingInstance, enableGoogleMlIntegration), "Updating your instance...");
            silent || utils.logLabeledBullet("dataconnect", "Instance updated");
        }
    }
    catch (err) {
        if (err.status !== 404) {
            throw err;
        }
        const freeTrialInstanceId = await (0, freeTrial_1.checkForFreeTrialInstance)(projectId);
        if (freeTrialInstanceId) {
            (0, freeTrial_1.printFreeTrialUnavailable)(projectId, freeTrialInstanceId);
            throw new error_1.FirebaseError("Free trial unavailable.");
        }
        silent ||
            utils.logLabeledBullet("dataconnect", `CloudSQL instance '${instanceId}' not found, creating it. This instance is provided under the terms of the Data Connect free trial ${(0, freeTrial_1.freeTrialTermsLink)()}`);
        silent || utils.logLabeledBullet("dataconnect", `This may take while...`);
        const newInstance = await (0, utils_1.promiseWithSpinner)(() => cloudSqlAdminClient.createInstance(projectId, locationId, instanceId, enableGoogleMlIntegration), "Creating your instance...");
        silent || utils.logLabeledBullet("dataconnect", "Instance created");
        connectionName = (newInstance === null || newInstance === void 0 ? void 0 : newInstance.connectionName) || "";
    }
    try {
        await cloudSqlAdminClient.getDatabase(projectId, instanceId, databaseId);
        silent || utils.logLabeledBullet("dataconnect", `Found existing database ${databaseId}.`);
    }
    catch (err) {
        silent ||
            utils.logLabeledBullet("dataconnect", `Database ${databaseId} not found, creating it now...`);
        await cloudSqlAdminClient.createDatabase(projectId, instanceId, databaseId);
        silent || utils.logLabeledBullet("dataconnect", `Database ${databaseId} created.`);
    }
    if (enableGoogleMlIntegration) {
        await (0, checkIam_1.grantRolesToCloudSqlServiceAccount)(projectId, instanceId, [GOOGLE_ML_INTEGRATION_ROLE]);
    }
    return connectionName;
}
exports.provisionCloudSql = provisionCloudSql;
function checkInstanceConfig(instance, requireGoogleMlIntegration) {
    var _a, _b, _c, _d;
    const settings = instance.settings;
    if (!((_a = settings.ipConfiguration) === null || _a === void 0 ? void 0 : _a.ipv4Enabled)) {
        return false;
    }
    if (requireGoogleMlIntegration) {
        if (!settings.enableGoogleMlIntegration) {
            return false;
        }
        if (!((_b = settings.databaseFlags) === null || _b === void 0 ? void 0 : _b.some((f) => f.name === "cloudsql.enable_google_ml_integration" && f.value === "on"))) {
            return false;
        }
    }
    const isIamEnabled = (_d = (_c = settings.databaseFlags) === null || _c === void 0 ? void 0 : _c.some((f) => f.name === "cloudsql.iam_authentication" && f.value === "on")) !== null && _d !== void 0 ? _d : false;
    return isIamEnabled;
}
exports.checkInstanceConfig = checkInstanceConfig;
